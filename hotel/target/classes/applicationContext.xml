<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop.xsd
            http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:component-scan base-package="com.msy.hotel.service.impl" />

    <!--②加载db.properties-->
    <context:property-placeholder location="classpath:db.properties" />
    <!--
        ③配置数据源
        class:配置数据库连接池
            org.springframework.jdbc.datasource.DriverManagerDataSource spring自带的数据库连接池
            com.alibaba.druid.pool.DruidDataSource druid数据库连接池
    -->
    <bean id="dataSource"
          class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${oracle_driver}" />
        <property name="url" value="${oracle_url}" />
        <property name="username" value="${oracle_username}" />
        <property name="password" value="${oracle_password}" />
    </bean>

    <!--④配置SqlSessionFactory-->
    <!-- 创建SqlSessionFactory，并配置实体对象别名 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <property name="typeAliasesPackage" value="com.msy.hotel.pojo" />
        <!--spring核心配置文件加载时加载mybaitis配置文件-->
        <!--<property name="configLocation" value="classpath:SqlMapConfig.xml"></property>-->
        <!--
            加载指定路径下的mapper.xml文件
        -->
        <property name="mapperLocations" >
            <list>
                <value>classpath:mapper/*.xml</value>
            </list>
        </property>
    </bean>

    <!--⑤扫描包,为该包的所有接口生成代理对象,如果需要扫描多个包中间用逗号隔开-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描包,为该包的所有接口生成代理对象,如果需要扫描多个包中间用逗号隔开
             代理对象这个时候就交给了spring管理
             将该包下的mapper.xml文件加载进内存
         -->
        <property name="basePackage" value="com.msy.hotel.mapper"></property>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <!-- ⑥配置Spring提供的事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!--xml配置事务管理-->
    <!--第一步:配置通知管理器-->
    <tx:advice id="txAdcvice" transaction-manager="transactionManager">
        <!--第二步:通知的方法  配置事务的属性-->
        <tx:attributes>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="tranfo*" propagation="REQUIRED"/>
            <tx:method name="query*" propagation="SUPPORTS"/>
        </tx:attributes>
    </tx:advice>
    <!-- 配置切面 -->
    <aop:config>
        <!--第三步 :切入点-->
        <aop:pointcut id="pt1" expression="execution(* com.msy.hotel.service.impl.*.*(..))"/>
        <!--第四步 :通知-->
        <aop:advisor advice-ref="txAdcvice" pointcut-ref="pt1"></aop:advisor>
    </aop:config>
</beans>